rule demoverse_suspicious_auth_unusual_interval_time3 {

    meta:
        author = "@cmmartin"
        description = "Generates a detection for authentication activity occurring between two locations in an unusual interval of time, with a bonus for compromised credentials."
        severity = "LOW"
        priority = "LOW"

    events:
        $e1.metadata.log_type = "WORKSPACE_ACTIVITY"
        $e1.metadata.event_type = "USER_LOGIN"
        $e1.metadata.product_event_type = "login_success"
        
        // Match variables
        $user = $e1.security_result.about.email
        $e1_lat = $e1.principal.location.region_coordinates.latitude
        $e1_long = $e1.principal.location.region_coordinates.longitude

        // ensure consistent event sequencing, i.e., $e1 is before $e2
        $e1.metadata.event_timestamp.seconds < $e2.metadata.event_timestamp.seconds
        // check the $e1 and $e2 coordinates represent different locations
        $e1_lat != $e2_lat
        $e1_long != $e2_long

        $e2.metadata.log_type = "WORKSPACE_ACTIVITY"
        $e2.metadata.event_type = "USER_LOGIN"    
        $e2.metadata.product_event_type = "login_success"
        // Ensure $e2 also belongs to the same user
        $user = $e2.security_result.about.email
        $e2_lat = $e2.principal.location.region_coordinates.latitude
        $e2_long = $e2.principal.location.region_coordinates.longitude

        // --- Data Table Check using row-based comparison ---
        // CORRECTED: Changed 'email' to 'email_address' to match your data table column
        $user = %Compromised_Credential_Emails_V2.email_address

    match:
        $user,
        $e1_lat, 
        $e1_long, 
        $e2_lat, 
        $e2_long 
        over 4h
    
    outcome:
        // calculate the interval between first and last event, in seconds
        $duration_hours = cast.as_int(
            min(
                ($e2.metadata.event_timestamp.seconds - $e1.metadata.event_timestamp.seconds) 
                / 3600
            )
        )

        // calculate distance between login events, and convert results into kilometers
        $distance_kilometers = math.ceil(
            max(
                math.geo_distance(
                    $e1_long,
                    $e1_lat,
                    $e2_long,
                    $e2_lat
                )
            ) 
            // convert the math.geo_distance result from meters to kilometers
            / 1000 
        )

        // calculate the speed in KPH
        $kph = math.ceil($distance_kilometers / $duration_hours)

        // // generate base risk_score based on KPH, i.e., speed over distance travelled
        $base_risk_score = (
            if($kph >= 100 and $kph <= 249, 35) +
            if($kph > 250 and $kph <= 449, 50) +
            if($kph > 500 and $kph <= 999, 75) +
            if($kph >= 1000, 90)
        ) 

        // Add bonus: Since the join in `events` ensures the user is compromised, add 9 directly.
        $compromised_credential_bonus = 9

        // Add the bonus to the base risk score
        $risk_score = $base_risk_score + $compromised_credential_bonus

        // change this according to your requirements
        $risk_score_threshold = 75
    
    condition:
        $e1 and $e2
}
